# -*- coding: utf-8 -*-
"""Test cases.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hXUGPI6i0NxCgxLDONtarq7A7TM6gzcI

**test_register_invalid_email_format**
Purpose: Rejects invalid email formats during registration.
"""

def test_register_invalid_email_format(self):
    response = self.client.post('/register', json={
        "first_name": "Gokul",
        "last_name": "Nair",
        "email": "gokul@example.com",  # invalid email
        "password": "12345678",
        "confirm_password": "12345678"
    })
    self.assertEqual(response.status_code, 400)
    self.assertIn(b"Invalid email format", response.data)

"""**test_register_duplicate_email**
Purpose: Prevents duplicate registration with the same email.
"""

def test_register_duplicate_email(self):
    self.client.post('/register', json={
        "first_name": "Raj",
        "last_name": "Singh",
        "email": "raj@example.com",
        "password": "pass1234",
        "confirm_password": "pass1234"
    })

    response = self.client.post('/register', json={
        "first_name": "Raj",
        "last_name": "Singh",
        "email": "raj@example.com",
        "password": "pass1234",
        "confirm_password": "pass1234"
    })
    self.assertEqual(response.status_code, 400)
    self.assertIn(b"Email already exists", response.data)

"""**test_login_unregistered_user**
Purpose: Prevents login attempt with an unregistered email.
"""

def test_login_unregistered_user(self):
    response = self.client.post('/login', json={
        "email": "notfound@example.com",
        "password": "somepassword"
    })
    self.assertEqual(response.status_code, 401)
    self.assertIn(b"Invalid email or password", response.data)

"""**test_register_short_password**
Purpose: Validates that passwords below a minimum length are rejected.
"""

def test_register_short_password(self):
    response = self.client.post('/register', json={
        "first_name": "Tiny",
        "last_name": "User",
        "email": "tiny@example.com",
        "password": "123",
        "confirm_password": "123"
    })
    self.assertEqual(response.status_code, 400)
    self.assertIn(b"Password too short", response.data)

"""**test_case_insensitive_email_login**
Purpose: Ensure login is case-insensitive for email.
"""

def test_case_insensitive_email_login(self):
    # Register with lowercase email
    self.client.post('/register', json={
        "first_name": "Rahul",
        "last_name": "Sensitive",
        "email": "rahul@example.com",
        "password": "casepass",
        "confirm_password": "casepass"
    })

    # Try logging in with uppercase email
    response = self.client.post('/login', json={
        "email": "RAHUL@EXAMPLE.COM",
        "password": "casepass"
    })
    self.assertEqual(response.status_code, 200)
    self.assertIn(b"Welcome Rahul Sensitive", response.data)